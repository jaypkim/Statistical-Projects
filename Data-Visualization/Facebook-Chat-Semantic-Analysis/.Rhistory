1. faithful=read.table("oldfaithful.txt", header=T,sep=",")
faithful=read.table("oldfaithful.txt", header=T,sep=",")
getwd()
setwd(/Users)
setwd("/Users")
getwd()
setwd("/Users/jaykim")
setwd()
getwd()
setwd("Downlaods")
white=c(rep(1,5205),rep(0,7375))
male=c(rep(1,2704), rep(0,2501), rep(1,3710),rep(0,3665))
white=c(rep(1,5205)rep(0,7375))
white=c(rep(1,5205),rep(0,7375))
male=c(rep(1,2704),rep(0,2501),rep91,3710),rep(0,3665)
male=c(rep(1,2704),rep(0,2501),rep(1,3710),rep(0,3665)
male=c(rep(1,2704),rep(0,2501),rep(1,3710),rep(0,3665)
male=c(rep(1,2704),rep(0,2501),rep(1,3710),rep(0,3665))
male=c(rep(1,2704),rep(0,2501),rep(1,3710),rep(0,3665))
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258),rep(1:0,c(619,3091)),rep(1:0,c(429,3236)))
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258),rep(1:0,c(619,3091)),rep(1:0,c(429,3236)))
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258)),rep(1:0,c(619,3091)),rep(1:0,429,3236)
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258)),rep(1:0,c(619,3091)),rep(1:0,429,3236)))
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258)),rep(1:0,c(619,3091)),rep(1:0,429,3236)))
obese=c(rep(1:0,c(446,2258)),rep(1:0,c(243,2258)),rep(1:0,c(619,3091)),rep(1:0,429,3236))
data=data.frame(cbind(obese,male,white))
obese = c(rep(1:0,c(446,2258)), rep(1:0,c(243,2258)), rep(1:0,c(619,3091)), rep(1:0,c(429,3236)))
data=data.frame(cbind(obese,male,white))
summary(data)
head(data)
with(data[data$white==1,],table(obese,male))
with(data[data$white==0,],table(obese,male))
with(data,table(obese,male,white))
with(data,table(obese,white))
mytab=with(data, table(obese, white))
mytab
barplot(mytab)
rownames(mytab)=c("Not Obese", "Obses")
colnames(mytab=c("Non-White","White"))
colnames(mytab)=c("Non-White","White")
barplot(mytab)
prop.table(mytab)
prop.table(mytab,margin=2)
barplot(prop.table(mytab,margin=2))
barplot(prop.table(mytab,margin=2),beside=T,ylim=c(0, + 1), ylab="Proportion of Obese", main=" Obesity by Ethnicity (White vs. Non-White)", + legend.text=rownames(mytab))
barplot(prop.table(mytab,margin=2),beside=T,ylim=c(0, 1), ylab="Proportion of Obese", main=" Obesity by Ethnicity (White vs. Non-White)", legend.text=rownames(mytab))
barplot(pro.table(mytab,mar=2),beside=T,ylim=c(0,1),col=c("black","white"),ylab="Proportion of Obese",main="Obesity by Ethnicity (White vs. Non-White)",xlab="Ethnicity")
barplot(prop.table(mytab,mar=2),beside=T,ylim=c(0,1),col=c("black","white"),ylab="Proportion of Obese",main="Obesity by Ethnicity (White vs. Non-White)",xlab="Ethnicity")
box()
legend(locator(1),rownames(mytab),fill=c("black","white"))
legend(locator(1),rownames(mytab),fill=c("black","white"))
legend(locator(1),rownames(mytab),fill=c("black","white"))
barplot(prop.table(mytab,mar=2),beside=T,ylim=c(0,1),col=c("black","white"),ylab="Proportion of Obese",main="Obesity by Ethnicity (White vs. Non-White)",xlab="Ethnicity")
box()
legend(locator(1),rownames(mytab),fill=c("black","white"))
legend(locator(1),rownames(mytab),fill=c("black","white"))
install.packages("vcd",repos="http://lib.stat.cmu.edu/R/CRAN")
library(vcd)
oddsratio(mytab, log=F)
oddsratio(mytab, log=T)
oddsratio(mytab, log=F)
1/oddsratio(mytab, log=F)
summary(oddsratio(mytab))
confint(oddsratio(mytab))
names(chisq.test(mytab))
chisq.test(mytab)$expected
?chisq.test
chisq.test(mytab)$p.value
names(chisq.test(mytab))
glm(obese~white,family=binomial,data=data)
plot(glm)
names(data)
glm(obese~white+male+white*male,family=binomial, data=data)
-2.0206+.2085
.4125-.2085+.1948
-2.0206-.2085
2.0206+.4125
-2.0206+.4125
prop.table(mytab)
prop.table(mytab,margin=2)
.1421017/(1-.1421017)
.1323727/(1-.1323727)
chisq.test(mytab)$expected
chisq.test(mytab)
fit.full=glm(obese~white+male+white*male,family=binomial, data=data)
fit.red=glm(obese~white+male,family=binomial, data=data)
anova(fit.red,fit.full)
anova(fit.full)
anova(fit.red,fit.full)
fit.full=glm(obese~white+male+white*male,family=binomial, data=data)
fit.red=glm(obese~white+male,family=binomial, data=data)
anova(fit.red,fit.full)
faithful=read.table("oldfaithful.txt", header=T,sep=",")
nrow(faithful)
2. There are 107 observations within the dataset
names(faithful)
3. The variables within in the data are Day, Interval, and Duration.
4.
head(faithful)
5. Indicator variables are necessary because the days have no intrinsic meanings.
day=faithful$DAY
interval=faithful$INTERVAL
duration=faithful$DURATION
fit.full=lm(interval~ as.factor(day) + duration ,data=faithful)
plot(fit.full)
anova(fit.full)
fit.red=lm(interval~duration,data=faithful)
faithful=read.table("oldfaithful.txt", header=T,sep=",")
nrow(faithful)
names(faithful)
head(faithful)
day=faithful$DAY
interval=faithful$INTERVAL
duration=faithful$DURATION
fit.full=lm(interval~ as.factor(day) + duration ,data=faithful)
plot(fit.full)
summary(fit.full)
anova(fit.full)
fit.red=lm(interval~duration,data=faithful)
summary(fit.red)
summary(anova(fit.red,fit.full))
fit.full=glm(obese~white+male+white*male,family=binomial, data=data)
fit.red=glm(obese~white+male,family=binomial, data=data)
anova(fit.red,fit.full)
anova(fit.full)
install.packages(c("manipulate", "mgcv"))
---
title: "Film Availability Highly Influential in Predicting Total Gross of Film"
install.packages(c("manipulate", "mgcv", "rmarkdown"))
plot(wt, mpg)
attach(mtcars)
plot(wt, mpg)
attach(mtcars)
plot(wt,mpg)
attach(mtcars)
q()
attach(mtcars)
plot(wt, mpg)
attach(mtcars)
plot(wt, mpg)
install.packages(c("manipulate", "mgcv", "rmarkdown"))
q()
attach(mtcars)
plot(wt, mpg)
install.packages("manipulate")
supply=5
demand=-3X
data=c(1,2,3,4,5,6,7,8)
plot(data)
data=c(1,2,3,10,5,6,7,8)
plot(data)
library(readr)
data_proto <- read_csv("~/Documents/jay-thesis/programming/data/data_proto.csv")
View(data_proto)
t(data_proto)
View(data_proto)
View(data_proto)
library(readr)
data_proto6 <- read_csv("~/Documents/jay-thesis/programming/data/data_proto6")
View(data_proto6)
problems(...)
#getwd()
#library(ggplot2)
setwd("/Volumes/Untitled/Jay's Data/STPV")
data=read.csv("-700/2.csv")
ticks=data$Ticks
ticks
p1=data$Performance.1
###P4=total performance
###Total=a1 counter
p4=data$Performance.4
tp=data$Total.Performance
ta1=data$Total.A.1.n.Reaction.1
gen=data$Generations
#getwd()
#library(ggplot2)
setwd("/Volumes/Untitled/Jay's Data/STPV")
data=read.csv("-900/2.csv")
ticks=data$Ticks
ticks
p1=data$Performance.1
###P4=total performance
###Total=a1 counter
p4=data$Performance.4
tp=data$Total.Performance
ta1=data$Total.A.1.n.Reaction.1
gen=data$Generations
plot(p4)
quartz()
plot(tp)
pdf("plots.pdf")
dev.off()
data=read.csv("-1000/1.csv")
ticks=data$Ticks
ticks
setwd("/Volumes/Untitled/Jay's Data/STPV")
install.package(dplyr)
install.packages(dplyr)
install.packages(msdr)
install.packages("dplyr")
install.packages("dplyr","mdsr","Lahman","lubridate","tidyr","nycflights13")
install.packages("mdsr","Lahman","lubridate","tidyr","nycflights13")
install.packages("Lahman","lubridate","tidyr","nycflights13")
install.packages("dplyr")
install.packages("mdsr")
install.packages("Lahman")
install.packages("lubridate")
install.packages("tidyr")
install.packages("nycflights13")
library(mdsr)
library("mdsr")
install.packages("mdsr")
install.packages("mdsr", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
version
version
version
dat <- data.frame(A = 1:3, B = 1:3)
dat[-1,]
dat
data=dat[-1,]
load("/Volumes/NO NAME/Datafest Expedia/weekend.R")
load("/Volumes/NO NAME/Datafest Expedia/.RData")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("sp","raster","maps","mapdata","maptools","ggmap","rgeos")
y
library(ggplot2,sp,raster,maps,mapdata,maptools,ggmap,rgeos)
install.packages("maps")
install.packages("mapdata")
install.packages("maptools")
install.packages("rgeos")
install.packages("ggmap")
install.packages("raster")
install.packages("sp")
library(ggplot2,sp,raster,maps,mapdata,maptools,ggmap,rgeos)
install.packages("maps")
library(ggplot2,sp,raster,maps,mapdata,maptools,ggmap,rgeos)
library(raster)
library(maps)
library(mapdata)
library(maptools)
library(ggmap)
library(rgeos)
myData = data.frame(name=c("Florida","Colorado","california","Harvard","Yellowstone"),
lat=c(28.1,39,37,42,44.6),
long=c(-81.6,-105.5,-120,-71,-110),
pop=c(280,156,128,118,202))
usa <- map_data("state")
ggplot() +
geom_path(data = usa, aes(x = long, y = lat, group = group)) +
geom_point(data = myData, aes(x = long, y = lat, size = pop), color = "red")
install.packages("rserve")
install.packages("Rserve")
library(Rserve)
Rserve()
source('~/Downloads/Jay-Kim_Super-data_R-script.R')
library(readr)
library(tidytext)
library(lubridate)
library(ggplot2)
data = read_csv("Code/Test-Case/messages.csv")
setwd("~/Documents/Statistical_Projects/Statistical_Projects/Data-Visualization/Facebook-Chat-Semantic-Analysis")
data = read_csv("Code/Test-Case/messages.csv")
data_sender = data[!(data$sender != "Jay Kim"),]
data_sender$hours = hour(data_sender$date)
data_sender$years = year(data_sender$date)
data_sender$months = month(data_sender$date)
data_sender$time_of_day = NA
data_sender$time_of_day[data_sender$hours >= 6 &
data_sender$hours <= 11] = "Morning"
data_sender$time_of_day[data_sender$hours > 11 &
data_sender$hours <= 16] = "Afternoon"
data_sender$time_of_day[data_sender$hours > 16 &
data_sender$hours < 20] = "Evening"
data_sender$time_of_day[data_sender$hours >= 20 |
data_sender$hours < 6] = "Night"
search()
search("Autoloads")
Autoloads
??Autoloads
data = read_csv("Code/Test-Case/messages.csv")
data_sender = data[!(data$sender != "Jay Kim"),]
data_sender$hours = hour(data_sender$date)
data_sender$years = year(data_sender$date)
data_sender$months = month(data_sender$date)
data_sender$time_of_day = NA
data_sender$time_of_day[data_sender$hours >= 6 &
data_sender$hours <= 11] = "Morning"
data_sender$time_of_day[data_sender$hours > 11 &
data_sender$hours <= 16] = "Afternoon"
data_sender$time_of_day[data_sender$hours > 16 &
data_sender$hours < 20] = "Evening"
data_sender$time_of_day[data_sender$hours >= 20 |
data_sender$hours < 6] = "Night"
data_sender$season = NA
data_sender$season[data_sender$months >= 12 | data_sender$months < 3] = "Winter"
data_sender$season[data_sender$months >= 3 & data_sender$months < 6] = "Spring"
data_sender$season[data_sender$months >= 6 & data_sender$months < 9] = "Summer"
data_sender$season[data_sender$months >= 9 & data_sender$months < 12] = "Fall"
data_2011 = data_sender[ which(data_sender$years == 2011),]
data_2011
freq_data_2011 = data_2011 %>%
group_by(data_2011$time_of_day) %>%
tally()
update.packages(ask=FALSE, checkBuilt = TRUE)
